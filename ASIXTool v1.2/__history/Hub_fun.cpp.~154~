// ---------------------------------------------------------------------------

#pragma hdrstop

#include "Main.h"
#include "USBDevConnectionInfo.h"
#include "Hub_fun.h"
// ---------------------------------------------------------------------------
USBDevConnectionInfo *USBCONInfo = new USBDevConnectionInfo();
#pragma package(smart_init)


Port_test *PORT = new Port_test();
AnsiString Port_test::getLanGUID(AnsiString LANname) { // 得到網卡名稱IP
	int IpCount = 0;
	ULONG ulLen1 = 8192;
	BYTE *pbBuf1 = new BYTE[ulLen1];
	IP_ADAPTER_INFO *pipai = NULL;
	IP_ADDR_STRING *pipas = NULL;
	if (ERROR_SUCCESS == GetAdaptersInfo((IP_ADAPTER_INFO*)pbBuf1, &ulLen1)) {
		pipai = (IP_ADAPTER_INFO*)pbBuf1;
		do {
			// 取得網卡名稱並儲存
			AnsiString LanName = (AnsiString)pipai->Description;
			if(LanName.Pos(LANname))
			{
				delete pbBuf1;
				return (AnsiString)pipai->AdapterName;
			}
			pipai = pipai->Next;
			IpCount++;
		}
		while (pipai != NULL);
	}
	delete pbBuf1;
	return "";
}

AnsiString Port_test::getLanIP(AnsiString LANname) { // 得到網卡名稱IP
	int IpCount = 0;
	ULONG ulLen1 = 8192;
	BYTE *pbBuf1 = new BYTE[ulLen1];
	IP_ADAPTER_INFO *pipai = NULL;
	IP_ADDR_STRING *pipas = NULL;
	if (ERROR_SUCCESS == GetAdaptersInfo((IP_ADAPTER_INFO*)pbBuf1, &ulLen1)) {
		pipai = (IP_ADAPTER_INFO*)pbBuf1;
		do {
			AnsiString LanName = (AnsiString)pipai->Description;
			// 取得網卡名稱並儲存
			pipas = &(pipai->IpAddressList); // 取得網卡IP並儲存
			while (pipas != NULL) {
				if(LanName.Pos(LANname))
				{
					delete pbBuf1;
					return (AnsiString)pipas->IpAddress.String;
				}
				pipas = pipas->Next;
			}
			pipai = pipai->Next;
			IpCount++;
		}
		while (pipai != NULL);
	}
	delete pbBuf1;
	return "";
}

AnsiString Port_test::getLanMAC(AnsiString LANname) { // 得到網卡名稱IP
	int IpCount = 0;
	ULONG ulLen1 = 8192;
	BYTE *pbBuf1 = new BYTE[ulLen1];
	IP_ADAPTER_INFO *pipai = NULL;
	IP_ADDR_STRING *pipas = NULL;
	if (ERROR_SUCCESS == GetAdaptersInfo((IP_ADAPTER_INFO*)pbBuf1, &ulLen1)) {
		pipai = (IP_ADAPTER_INFO*)pbBuf1;
		do {
			AnsiString LanName = (AnsiString)pipai->Description;
			// 取得網卡名稱並儲存
			pipas = &(pipai->IpAddressList); // 取得網卡IP並儲存
			while (pipas != NULL) {
				if(LanName.Pos(LANname))
				{
					// Mac ID
					AnsiString szTemp;
					szTemp.sprintf("%02X:%02X:%02X:%02X:%02X:%02X", pipai->Address[0],
					pipai->Address[1], pipai->Address[2], pipai->Address[3],
					pipai->Address[4], pipai->Address[5]);
					delete pbBuf1;
					return szTemp;
				}
				pipas = pipas->Next;
			}
			pipai = pipai->Next;
			IpCount++;
		}
		while (pipai != NULL);
	}
	delete pbBuf1;
    return "NO Device";
}

void Port_test::AddNewMAC(AnsiString LANHUID,
	AnsiString VPID, AnsiString LANname, AnsiString value) {
	AnsiString temppath, temp, LANnum;
	AnsiString lanGUID = getLanGUID(frmMain->gLAN_NAME);
	TRegistry *reg = new TRegistry();
	TStringList *ts = new TStringList;
	reg->RootKey = HKEY_LOCAL_MACHINE;
	temppath = "SYSTEM\\CurrentControlSet\\Control\\Class\\" + LANHUID;
	reg->OpenKey(temppath.c_str(), false);
	reg->GetKeyNames(ts);
	for (int i = 0; i < ts->Count; i++) {
	//路徑名稱補0
		LANnum = ts->Strings[i];
		temppath = "SYSTEM\\CurrentControlSet\\Control\\Class\\" + LANHUID +
			"\\" + LANnum;
		reg->CloseKey();
		reg->OpenKey(temppath.c_str(), false);
		long tollnum = reg->InstanceSize();
		AnsiString tempID = (AnsiString)reg->ReadString("DeviceInstanceID");
		AnsiString tempGUID = (AnsiString)reg->ReadString("NetCfgInstanceId");
		AnsiString tempDeviceID = (AnsiString)reg->ReadString("DriverDesc");

		if(tempID.Pos(VPID)&&tempGUID.Pos(lanGUID))
		{
			reg->WriteString("*SpeedDuplex", value);
			reg->WriteString("NetworkAddress", frmMain->strTime);
		}
	}
	reg->CloseKey();
	delete reg,ts;
}
bool Port_test::ChangeLanSpeed(AnsiString VPID, AnsiString GUID,
	AnsiString LANname) {
	bool dwErrorCount = 0;
	int pingnum = 0;
	AnsiString ip = "";
	if(!LANname.Pos("Intel")&&frmMain->ckbNoMAC->Caption.Pos("√"))
	{
		if(!frmMain->lab_devicename->Caption.Pos("88772"))
			AddNewMAC(GUID, VPID, LANname, "6");  //切速度
		else
			AddNewMAC(GUID, VPID, LANname, "4");  //切速度
		frmMain->ProgressBar->Position += 5;
		if (!cmd_restartdevice())
		{
			frmMain->ERROR_MSG = "(!)DEVICE　RESTART FAIL";
			return false;
		}
		else frmMain->current_mac->Caption="00:24:9B:00:00:00";
	}
	frmMain->ProgressBar->Position = 25;
	int i=6;
	if(frmMain->lab_devicename->Caption.Pos("88772"))
		i = 4;
	bool bReStart = false;
	for(i;i>=2;i-=2)
	{
		ULONG timeout = GetTickCount()+20000;
		while(!ip.Pos("192.168")){
			if(frmMain->gLAN_NAME == ""&&GetTickCount() >= (timeout-10000))
			{
				frmMain->bPlugOut = true;
				frmMain->ERROR_MSG = "Not Find DUT";
				frmMain->SaveLogLine(frmMain->gFileName,frmMain->ERROR_MSG);
				return false;
			}
			if(GetTickCount() >= timeout)
			{
				frmMain->ERROR_MSG = "(!)Not Find IP";
				frmMain->SaveLogLine(frmMain->gFileName,frmMain->ERROR_MSG);
				return false;
			}
			ip = getLanIP(LANname);
			if(frmMain->g_bError) return false;
			PORT->Delay(100);
		}
		// 得到ping ip
		TStringList *sList = new TStringList();
		sList->Delimiter = '.';
		timeout = GetTickCount()+20000;
		while(!sList->DelimitedText.Pos("192.168"))
		{
			sList->DelimitedText = getDHCP_Server_IP(LANname);
			if(GetTickCount() >= timeout)
			{
				frmMain->ERROR_MSG = "(!)Not Find DHCP Server IP";
				frmMain->SaveLogLine(frmMain->gFileName,frmMain->ERROR_MSG);
				frmMain->SaveLogLine(frmMain->gFileName,LANname);
				frmMain->SaveLogLine(frmMain->gFileName,sList->DelimitedText);
				delete sList;
				return false;
			}
			if(frmMain->gLAN_NAME == "")
			{
				frmMain->bPlugOut = true;
				frmMain->ERROR_MSG = "Not Find DUT";
				frmMain->SaveLogLine(frmMain->gFileName,frmMain->ERROR_MSG);
				delete sList;
				return false;
			}
			if(frmMain->g_bError) return false;
			PORT->Delay(100);
		}
		AnsiString PingIP;
		if(sList->DelimitedText.Pos("192.168"))
			PingIP = sList->Strings[0]+"."+sList->Strings[1]+"."+sList->Strings[2]+".1";
		delete sList;
		if(frmMain->g_bError) return false;
		frmMain->ProgressBar->Position += 5;
		//
		frmMain->SaveLogLine(frmMain->gFileName,"Start Ping");
		if(CheckSpeed(LANname,i))
		{
			if(!frmMain->Ping(PingIP,false,i))
			{
				frmMain->ERROR_MSG = "";
				PORT->Delay(100);
				frmMain->moDebug->Lines->Add("-----");
				if(!frmMain->Ping(PingIP,true,i))
				{
					if(i == 6)
						frmMain->pan_1000->Color = clRed;
					if(i == 4)
						frmMain->pan_100->Color = clRed;
					if(i == 2)
						frmMain->pan_10->Color = clRed;
					frmMain->SaveLogLine(frmMain->gFileName,frmMain->ERROR_MSG);
					return false;
				}
				else frmMain->ERROR_MSG = "";
			}
			if(i >= 6)
			{
				frmMain->pan_1000->Color = clGreen;
				Delay(1000);
			}
			if(i >= 4)
			{
				frmMain->pan_100->Color = clGreen;
				Delay(1000);
			}
			if(i >= 2)
				frmMain->pan_10->Color = clGreen;
			//跑單速
			frmMain->plResult->Color = clGreen;
			frmMain->Panel_lan->Color = clGreen;
			return true;
		}
		else
		{
			if(!bReStart)
			{   //下個迴圈仍是同速度
				if(frmMain->lab_devicename->Caption.Pos("88772")&&i==4)
					i = 6;
				else if(i==6) i = 8;
			}
			else
			{
				frmMain->ERROR_MSG = "網速未達到(Speed of PING Fail)";
				return false;
			}
		}
		frmMain->SaveLogLine(frmMain->gFileName,"Ping　Over");
		frmMain->moDebug->Lines->Add("====");
		//切速
		if(i != 2)
		{
			Search_System_Exist_Lan_Speed(GUID, VPID, LANname, i-2);
			if (!cmd_restartdevice())
			{
				frmMain->ERROR_MSG = "(!)DEVICE　RESTART FAIL";
				return false;
			}
		}
		frmMain->ProgressBar->Position += 5;
		bReStart = true;
	}
	if(frmMain->lab_devicename->Caption.Pos("88772"))
		Search_System_Exist_Lan_Speed(GUID, VPID, LANname, 4);
	else Search_System_Exist_Lan_Speed(GUID, VPID, LANname, 6);
	frmMain->plResult->Color = clGreen;
	frmMain->Panel_lan->Color = clGreen;
	return true;
}
// ---------------------------------------------------------------------------
void Port_test::Delay(DWORD iMilliSeconds) // 原版delay time 用在thread裡面
{
	DWORD iStart;
	iStart = GetTickCount();
	while (GetTickCount() - iStart <= iMilliSeconds)
		Application->ProcessMessages();
}

bool Port_test::cmd_restartdevice() // 重啟設備
{
	DWORD RestartDutTimeOut = 0;
	if(USBCONInfo->RestartDev(frmMain->g_DevVPID.SubString(5,4), frmMain->g_DevVPID.SubString(14,4)))
	{
		RestartDutTimeOut = GetTickCount()+10000;
		while (frmMain->gLAN_NAME == "")
		{
			if(GetTickCount() >= RestartDutTimeOut)
				return false;
			Delay(100);
		}
		return true;
	}
	else
	{
		if(USBCONInfo->RestartDev(frmMain->g_DevVPID.SubString(5,4), frmMain->g_DevVPID.SubString(14,4)))
		{
			RestartDutTimeOut = GetTickCount()+10000;
			while (frmMain->gLAN_NAME == "")
			{
				if(GetTickCount() >= RestartDutTimeOut)
					return false;
				Delay(100);
			}
			return true;
		}
	}
	return false;
}
char* Port_test::lan_find_inf(char *pData, char *pname) { // 查找字串回傳後面的字串
	char *p, *p1;
	p = pData;
	p1 = strstr(p, pname);
	if (p1 == NULL)
		return NULL;
	p = p1 + strlen(pname);
	return p;
}
AnsiString Port_test::GetLANName(){
	//取得網卡資訊
	ULONG ulLen1=8192;
	BYTE *pbBuf1=new BYTE[ulLen1];
	IP_ADAPTER_INFO *pipai=NULL;
	AnsiString szTemp;
	if(ERROR_SUCCESS==GetAdaptersInfo((IP_ADAPTER_INFO*)pbBuf1, &ulLen1))
	{
		//網卡資訊
		pipai=(IP_ADAPTER_INFO*)pbBuf1;
		do
		{
			AnsiString lanname = pipai->Description;
			if(!frmMain->TListInitLAN->Text.Pos(lanname))
			{
				if(lanname.Pos("Wi-Fi")||lanname.Pos("Wireless"))
				{
					frmMain->lab_devicename->Caption = "";
					frmMain->current_mac->Caption = "未插入設備";
					frmMain->gLAN_NAME = "";
				}
				else
				{
					if(lanname.Pos("AX88772C"))
						frmMain->lab_devicename->Caption = "AX88772C";
					else if(lanname.Pos("AX88772B"))
						frmMain->lab_devicename->Caption = "AX88772B";
					else if(lanname.Pos("AX88179"))
						frmMain->lab_devicename->Caption = "AX88179";
					else
						frmMain->lab_devicename->Caption = lanname;
					frmMain->gLAN_NAME = frmMain->lab_devicename->Caption;
					szTemp.sprintf("%02X:%02X:%02X:%02X:%02X:%02X", pipai->Address[0],
					pipai->Address[1], pipai->Address[2], pipai->Address[3],
					pipai->Address[4], pipai->Address[5]);
					if(frmMain->ckbBurn->Caption.Pos("√"))
					{
						else if(frmMain->Test_Step == GET_DUT)
							frmMain->current_mac->Caption  =  szTemp;
						else READClick(NULL);
					}
					else frmMain->current_mac->Caption  =  szTemp;

					delete pbBuf1;
					return lanname;
				}
			}
			else
			{
				frmMain->lab_devicename->Caption = "";
				frmMain->current_mac->Caption = "未插入設備";
				frmMain->gLAN_NAME = "";
			}
			pipai=pipai->Next;
		} while(pipai!=NULL);
	}
	delete pbBuf1;
	return "";
}
AnsiString Port_test::getDHCP_Server_IP(AnsiString LANname) { // 得到DHCP_SERVER IP
	ULONG ulLen1 = 8192;
	BYTE *pbBuf1 = new BYTE[ulLen1];
	IP_ADAPTER_INFO *pipai = NULL;
	IP_ADDR_STRING *pipas = NULL;
	if (ERROR_SUCCESS == GetAdaptersInfo((IP_ADAPTER_INFO*)pbBuf1, &ulLen1)) {
		pipai = (IP_ADAPTER_INFO*)pbBuf1;
		do {
			// 取得網卡名稱並儲存
			AnsiString LanName = (AnsiString)pipai->Description;
			if (LanName.Pos(LANname)) {
				delete pbBuf1;
				AnsiString DHCP_ServerIP = (AnsiString)pipai->DhcpServer.IpAddress.String;
				if(DHCP_ServerIP=="")
				{
					pipas = &(pipai->GatewayList);
					DHCP_ServerIP = (AnsiString)pipas->IpAddress.String;

                }
				return DHCP_ServerIP;
			}
			pipai = pipai->Next;
		}
		while (pipai != NULL);
	}
	delete pbBuf1;
	return "";
}
void Port_test::IntiNetwordCard()
{
	//取得網卡資訊
	ULONG ulLen1=8192;
	BYTE *pbBuf1=new BYTE[ulLen1];
	IP_ADAPTER_INFO *pipai=NULL;
	frmMain->TListInitLAN->Clear();
	if(ERROR_SUCCESS==GetAdaptersInfo((IP_ADAPTER_INFO*)pbBuf1, &ulLen1))
	{
		//網卡資訊
		pipai=(IP_ADAPTER_INFO*)pbBuf1;
		do
		{
			if(!AnsiString(pipai->Description).Pos("ASIX"))
				frmMain->TListInitLAN->Add(pipai->Description);
			pipai=pipai->Next;
		}
		while(pipai!=NULL);
	}
	delete pbBuf1;
}
void Port_test::Search_System_Exist_Lan_Speed(AnsiString LANHUID,
	AnsiString VPID, AnsiString LANname, AnsiString value) { // 修改網路速度根據網卡名稱全改 (依據登錄檔)
	AnsiString temppath, temp, LANnum;
	AnsiString lanGUID = getLanGUID(LANname);
	TRegistry *reg = new TRegistry();
	reg->RootKey = HKEY_LOCAL_MACHINE;
	for (int i = 0; i <= 9999; i++) {
	//路徑名稱補0
		if (i < 10)
			LANnum = "000" + (AnsiString)i;
		if (i >= 10 && i < 100)
			LANnum = "00" + (AnsiString)i;
		if (i >= 100 && i < 1000)
			LANnum = "0" + (AnsiString)i;
		if (i >= 1000 && i < 10000)
			LANnum = (AnsiString)i;
		temppath = "SYSTEM\\CurrentControlSet\\Control\\Class\\" + LANHUID +
			"\\" + LANnum;
		reg->CloseKey();
		reg->OpenKey(temppath.c_str(), false);
		long tollnum = reg->InstanceSize();
		AnsiString tempID = (AnsiString)reg->ReadString("DeviceInstanceID");
		AnsiString tempGUID = (AnsiString)reg->ReadString("NetCfgInstanceId");
		AnsiString tempDeviceID = (AnsiString)reg->ReadString("DriverDesc");
		//frmMain->Memo2->Lines->Add(tempDeviceID);
		//frmMain->Memo2->Lines->Add("ASIX AX88772B USB2.0 to Fast Ethernet Adapter (Test Driver)");
		if (tempID.Pos(VPID) && tempGUID.Pos(lanGUID)) {
			if(tempDeviceID == "AX88772B"){
				reg->WriteString("ConnectionType", value);
				//frmMain->Memo2->Lines->Add("is same!");
			}
			else{
				reg->WriteString("*SpeedDuplex", value);
				//frmMain->Memo2->Lines->Add("is not same!");
			}
		}
	}
	reg->CloseKey();
	delete reg;
}
bool Port_test::CheckDir(){
	//取得網卡資訊
	int lan_index = 0;
	ULONG ulLen1=8192;
	BYTE *pbBuf1=new BYTE[ulLen1];
	IP_ADAPTER_INFO *pipai=NULL;
	IP_ADDR_STRING *pipas=NULL;
	if(ERROR_SUCCESS==GetAdaptersInfo((IP_ADAPTER_INFO*)pbBuf1, &ulLen1))
	{
		//網卡資訊
		pipai=(IP_ADAPTER_INFO*)pbBuf1;
		do
		{
			AnsiString lanname = pipai->Description;
			if(PORT->lan_find_inf(lanname.c_str(), "AX88179")){
				frmMain->lab_devicename->Caption = "AX88179";
			}else if(PORT->lan_find_inf(lanname.c_str(), "AX88772B")){
				frmMain->lab_devicename->Caption = "AX88772B";
			}else if(PORT->lan_find_inf(lanname.c_str(), "AX88772C")){
				frmMain->lab_devicename->Caption = "AX88772C";
			}
			if(lanname.Pos("AX88772")||lanname.Pos("AX88179")){
				if(((AnsiString)pipai->Description).Pos("Test Driver"))
				{
					delete pbBuf1;
					return true;
				}
			}
			pipas=&(pipai->IpAddressList);
			pipai=pipai->Next;
			lan_index++;
		} while(pipai!=NULL);
	}
	delete pbBuf1;
	return false;
}
bool Port_test::CheckSpeed(AnsiString LANNAME,DWORD dwSpeed)
{
	frmMain->moDebug->Clear();
    MIB_IFTABLE   *pIfTable = NULL;
    ULONG          dwSize = 0;
    DWORD          dwRet;
	dwRet = GetIfTable(pIfTable, &dwSize, TRUE);
	bool bHave = false;
	if(dwSpeed==6) dwSpeed = 1000;
	if(dwSpeed==4) dwSpeed = 100;
	if(dwSpeed==2) dwSpeed = 10;
    if (dwRet == ERROR_INSUFFICIENT_BUFFER)
    {
        pIfTable = (MIB_IFTABLE *) new char[dwSize];
        if (pIfTable != NULL)
        {
			dwRet = GetIfTable(pIfTable, &dwSize, TRUE);
            if (dwRet == NO_ERROR)
            {
				//printf("dwNumEntries = %u\n", pIfTable->dwNumEntries);
				for (int i = 0; i < pIfTable->dwNumEntries; i++)
				{
                    //MIB_IF_TYPE_ETHERNET ->以太网
					if ((pIfTable->table[i]).dwType == MIB_IF_TYPE_ETHERNET && (pIfTable->table[i]).dwAdminStatus == 1
                         && ((pIfTable->table[i].dwOperStatus) == MIB_IF_OPER_STATUS_OPERATIONAL))
					{
						if(pIfTable->table[i].dwSpeed != 0)
						{

							AnsiString str=AnsiString((char*)(pIfTable->table[i]).bDescr);
							if(str.Pos(LANNAME))
							{
								frmMain->moDebug->Lines->Add(str);
								DWORD NowSpeed = (pIfTable->table[i]).dwSpeed /1000000;
								frmMain->moDebug->Lines->Add("dwSpeed ="+AnsiString(NowSpeed)+"M");
								frmMain->moDebug->Lines->Add("*********");
								if(NowSpeed != dwSpeed)
									return false;
								else bHave = true;
							}
						}

                    }
				}
				if(bHave) return true;
			}
		}
	}
	return false;
}

